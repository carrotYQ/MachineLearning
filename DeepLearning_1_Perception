#!/usr/bin/env python
# encoding: utf-8
# python 3.2

import numpy as np
from random import choice
from sklearn.model_selection import cross_validate
from sklearn.linear_model import LogisticRegression

"""
1. 将权重初始化为0 或一个很小的随机数
2. 对于每个训练样本x(i)执行下列步骤：
   1)计算输出值y^
   2)更新权重
"""

# 加载数据
def  load_data():
    input_data = [[1,1], [0,0], [1,0], [0,1]]
    labels = [1, 0, 0, 0]
    return input_data, labels

# 训练感知器
def train_pre(input_data, y, iteration, rate):
    """
    :param input_data: 训练数据
    :param y: 标签列表
    :param interation:训练轮数
    :param rate: 学习率
    :return:
    """
    # 激活函数：跃阶函数
    unit_step = lambda x : 0 if x < 0 else 1
    # 初始化权重参数:  随机生成【0，1）之间，作为初始化w
    w = np.random.rand(len(input_data[0]))
    # 偏置
    bias = 0.0

    # 迭代训练
    for i in range(iteration):
        samples = zip(input_data, y)
        # 对每一组样本
        for (input_i, label) in samples:
            # 计算f(w * xi + b),此时x有两个
            result = input_i * w + bias
            result = float(sum(result))
            # 计算输出值y^
            y_pred = float(unit_step(result))
            # 更新权重
            w = w + rate * (label - y_pred) * np.array(input_i)
            #更新bias
            bias = rate * (label - y_pred)
    return w, bias

# 预测目标值y^
def predict(input_i, w, b):
    # 定义激活函数
    unit_step = lambda x : 0 if x < 0 else 1
    result = input_i * w + b
    result = sum(result)
    y_pred = float(unit_step(result))
    print(y_pred)

if __name__ == '__main__':
    input_data,y = load_data()
    w, b = train_pre(input_data, y, 20 ,0.01)
    print(w, b)
    predict([1,1], w, b)
    predict([1,0], w, b)
    predict([0,1], w, b)
    predict([0,0], w, b)
